- hosts: all
  become: yes
  tasks:

  - name: Install Needed packages
    yum:
     name: 
     - open-vm-tools
     - yum-utils
     - device-mapper-persistent-data
     - lvm2
     state: latest

  - name: Yum update after os intallation
    yum:
     name: '*'
     state: latest
     update_cache: yes

#Preparation for Kubernetes cluster installation

  - name: add every machine to hosts file
    lineinfile:
      dest: /etc/hosts
      line: "{{ hostvars[item].ansible_host }}     {{ hostvars[item].inventory_hostname_short }}"
      state: present
    with_items: "{{ groups.all }}"

  - name: Masquerade firewalld
    firewalld:
     masquerade: yes
     state: enabled
     permanent: true
     immediate: yes

  - name: Disabling Selinux
    selinux:
      state: disabled
  - name: disable swap
    shell: /usr/sbin/swapoff -a

  - name: remove swapfile from /etc/fstab
    mount:
     path: swap
     fstype: swap
     state: absent

  - name: Rebooting the machine
    reboot:
     msg: " rebooting after installing os and update"

  - name: Add Docker repo
    get_url:
      url: https://download.docker.com/linux/centos/docker-ce.repo
      dest: /etc/yum.repos.d/docer-ce.repo
    become: yes

  - name: Adding files to containerd.conf
    ansible.builtin.file:
      path: /etc/modules-load.d/containerd.conf
      state: touch

  - name: Add a line to a file if the file does not exist, without passing regexp
    ansible.builtin.lineinfile:
      path: /etc/modules-load.d/containerd.conf
      line: "{{ item }}"
    with_items:
      - br_netfilter
      - overlay

  - name: Add needed modules without reloading
    modprobe:
      name: "{{ item }}"
    with_items:  
      - overlay
      - br_netfilter

  - name: Adding files to 99-kubernetes-cri.conf
    ansible.builtin.file:
      path: /etc/sysctl.d/99-kubernetes-cri.conf
      state: touch

  - name: Add a line to 99-kubernetes-cri.conf
    ansible.builtin.lineinfile:
      path: /etc/sysctl.d/99-kubernetes-cri.conf
      line: "{{ item }}"
    with_items:      
      - net.bridge.bridge-nf-call-iptables = 1
      - net.ipv4.ip_forward = 1
      - net.bridge.bridge-nf-call-ip6tables = 1

  - name: Load kernel modules
    shell: sysctl --system
    args:
      executable: /bin/bash

  - name: Installing Containerd
    yum:
     name:
     - containerd.io-{{ containerd_version }}
     state: latest

  - name: Creates directory for containerd daemon
    file:
      path: /etc/containerd
      state: directory

  - name: Configure containerd
    shell: containerd config default | sudo tee /etc/containerd/config.toml
    args:
      executable: /bin/bash

  - name: Changing SystemdGroup
    lineinfile:
      path: /etc/containerd/config.toml
      insertafter: ".containerd.runtimes.runc.options]" 
      line: "             SystemdCgroup = true"
      firstmatch: yes
      state: present  
    register: lineinfileexample

  - name: Just force systemd to reread configs
    ansible.builtin.systemd:
      daemon_reload: yes

  - name: Start and enable containerd
    systemd:
     name: containerd
     enabled: yes
     state: started

  - name: Create the 'kubeadmin' user
    user:
      name: kubeadmin
      append: yes
      state: present
      createhome: yes
      shell: /bin/bash

  - name: Allow 'kubeadmin' to have passwordless sudo
    lineinfile:
      dest: /etc/sudoers
      line: 'kubeadmin ALL=(ALL) NOPASSWD: ALL'
      validate: 'visudo -cf %s'

  - name: Set authorized key for user kubeadmin copying it from current user
    authorized_key:
     user: kubeadmin
     state: present
     key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"

#Beginning installation of Kubernetes cluster for your nodes

  - name: Add Kubernetes yum repos
    yum_repository:
     name: Kubernetes
     description: Kubernetes YUM repo
     baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
     gpgcheck: yes
     gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

  - name: Installing kubelet
    yum:
      name: kubelet-{{ kubelet_version }}
      state: present

  - name: Installing kubeadm
    yum:
      name: kubeadm-{{ kubeadm_version }}
      state: present

  - name: Enabling kubelet
    systemd:
     name: kubelet
     enabled: yes
     state: started

  - name: Replace a localhost entry with our own
    ansible.builtin.lineinfile:
      path: /etc/sysconfig/kubelet
      regexp: 'KUBELET_EXTRA_ARGS='
      line: KUBELET_EXTRA_ARGS=--cgroup-driver=systemd

- hosts: master
  become: yes
  tasks:
  - name: install kubectl
    yum:
     name: kubectl-{{ kubectl_version }}
     state: present
 
  - name: Port range for kubernetes master nodes
    firewalld:
     port: "{{ item }}"
     state: enabled
     permanent: yes
     immediate: yes
    with_items:
     - 6443/tcp
     - 2379/tcp
     - 2380/tcp
     - 10250/tcp
     - 10251/tcp
     - 6783/udp
     - 6784/udp
     - 6783/tcp
     - 6781/tcp
     - 6782/tcp


#Creating cluster with kubeadm

- hosts: master
  become: yes
  tasks:
  - name: initialize the cluster
    shell: kubeadm init
    args:
     chdir: $HOME
     creates: cluster_initialized.txt

  - name: create .kube directory
    become: yes
    become_user: kubeadmin
    file:
     path: $HOME/.kube
     state: directory
     mode: 0755

  - name: copy admin.conf to user's kube config
    copy:
     src: /etc/kubernetes/admin.conf
     dest: /home/kubeadmin/.kube/config
     remote_src: yes
     owner: kubeadmin

  - name: install Pod network
    become: yes
    become_user: kubeadmin
    shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
    args:
     chdir: $HOME
     creates: pod_network_setup.txt

- hosts: master
  become: yes
  gather_facts: false
  tasks:
  - name: get join command
    shell: kubeadm token create --print-join-command
    register: join_command_raw

  - name: set join command
    set_fact:
      join_command: "{{ join_command_raw.stdout_lines[0] }}"


- hosts: workers
  become: yes
  tasks:

  - name: Port range for kubernetes worker nodes
    firewalld:
     port: "{{ item }}"
     state: enabled
     permanent: yes
     immediate: yes
    with_items:
     - 10250/tcp
     - 30000-32767/tcp
     - 6783/udp
     - 6784/udp
     - 6783/tcp
     - 6781/tcp
     - 6782/tcp

- hosts: master
  become: yes
  gather_facts: false
  tasks:
    - name: get join command
      shell: kubeadm token create --print-join-command
      register: join_command_raw

    - name: set join command
      set_fact:
        join_command: "{{ join_command_raw.stdout_lines[0] }}"


- hosts: workers
  become: yes
  tasks:
    - name: join cluster
      shell: "{{ hostvars['master'].join_command }} >> node_joined.txt"
      args:
        chdir: $HOME
        creates: node_joined.txt
